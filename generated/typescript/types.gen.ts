// This file is auto-generated by @hey-api/openapi-ts

export type Permission = {
    /**
     * The type of permission.
     */
    type: 'sanity.document.filter' | 'sanity.document.filter.mode' | 'sanity.organization' | 'sanity.organization.legal' | 'sanity.organization.members' | 'sanity.organization.projects' | 'sanity.organization.roles' | 'sanity.organization.sso' | 'sanity.project' | 'sanity.project.cors' | 'sanity.project.datasets' | 'sanity.project.graphql' | 'sanity.project.members' | 'sanity.project.roles' | 'sanity.project.tags' | 'sanity.project.tokens' | 'sanity.project.usage' | 'sanity.project.webhooks';
    /**
     * The name of the permission. This is the unique identifier for the resource.
     */
    name: string;
    /**
     * The human-readable title of the permission
     */
    title: string;
    /**
     * The human-readable description of the permission
     */
    description?: string;
    /**
     * The resource that the permission applies to.
     */
    resourceType: string;
    /**
     * The resource ID that the permission applies to.
     */
    resourceId: string;
    /**
     * The organization ID that the permission applies to. Used for wildcard permissions where the resourceId is `*`.
     */
    ownerOrganizationId?: string;
    /**
     * The parameters for the permission. This is a key-value map of the permission's configuration.
     */
    params?: {
        [key: string]: unknown;
    };
};

/**
 * The type of permission.
 */
export type type = 'sanity.document.filter' | 'sanity.document.filter.mode' | 'sanity.organization' | 'sanity.organization.legal' | 'sanity.organization.members' | 'sanity.organization.projects' | 'sanity.organization.roles' | 'sanity.organization.sso' | 'sanity.project' | 'sanity.project.cors' | 'sanity.project.datasets' | 'sanity.project.graphql' | 'sanity.project.members' | 'sanity.project.roles' | 'sanity.project.tags' | 'sanity.project.tokens' | 'sanity.project.usage' | 'sanity.project.webhooks';

export type Role = {
    name: string;
    title: string;
    description?: string;
    isCustom?: boolean;
    resourceType: string;
    resourceId: string;
    appliesToUsers: boolean;
    appliesToRobots: boolean;
    permissions?: Array<{
        name: string;
        /**
         * The parameters for the permission. This is a key-value map of the permission's configuration.
         */
        params?: {
            [key: string]: unknown;
        };
    }>;
};

export type Membership = {
    resourceType: string;
    resourceId: string;
    roleNames: Array<(string)>;
};

export type Memberships = Array<Membership>;

export type User = {
    sanityUserId: string;
    profile: UserProfile;
    memberships: Memberships;
};

export type Request = {
    id: string;
    status: string;
    resourceId: string;
    resourceType: string;
    createdAt: string;
    updatedAt?: string;
    updatedByUserId?: string;
    requestedByUserId: string;
    note?: string;
    requestedByUserProfile?: UserProfile;
    type?: RequestType;
    requestedRole?: string;
};

/**
 * Resources are entities that can be managed and accessed through the
 * Access API.
 *
 */
export type ResourceType = 'organization' | 'project';

/**
 * A robot is a service account that can be used to authenticate with the API.
 */
export type Robot = {
    /**
     * The unique identifier for the robot.
     */
    readonly id: string;
    /**
     * A human-readable label for the robot.
     */
    label: string;
    /**
     * The creation date of the robot.
     */
    readonly createdAt: string;
    memberships: Memberships;
};

export type RobotWithToken = Robot & {
    /**
     * The secret token for the robot.
     */
    readonly token: string;
};

export type Invite = {
    id: string;
    status: InviteStatus;
    resourceType: ResourceType;
    resourceId: string;
    role: string;
    /**
     * The email address of the invitee. Only present if the invite is still pending.
     *
     */
    email?: string;
    inviterType: InviterType;
    /**
     * The ID of the user or service that created the invite. Only present if the invite was created by a user.
     *
     */
    inviterId?: string;
    /**
     * The ID of the user that accepted the invite. Only present if the invite has been accepted.
     *
     */
    inviteeId?: string;
    createdAt: string;
    updatedAt: string;
};

export type InviteStatus = 'pending' | 'accepted' | 'revoked';

export type InviterType = 'user' | 'service';

export type UserProfile = {
    id: string;
    displayName: string;
    email: string;
    familyName?: string;
    givenName?: string;
    middleName?: (string) | null;
    imageUrl?: string;
    provider: string;
    tosAcceptedAt?: string;
    createdAt: string;
    updatedAt?: string;
    isCurrentUser?: boolean;
    providerId?: string;
};

/**
 * The type of request.
 */
export type RequestType = 'access' | 'role';

/**
 * The User ID
 */
export type ParametersanityUserIdParam = string;

/**
 * The resource to scope access requests to.
 */
export type ParameterresourceTypeParam = ResourceType;

/**
 * The resource ID to scope the access request to. Must be a valid ID for the resource type.
 */
export type ParameterresourceIdParam = string;

/**
 * The robot unique identifier.
 */
export type ParameterrobotIdParam = string;

/**
 * The role name
 */
export type ParameterroleNameParam = string;

/**
 * The name of the permission. This is a unique identifier for the permission.
 */
export type ParameterpermissionNameParam = string;

/**
 * ID of the request
 */
export type ParameterrequestIdParam = string;

/**
 * Whether to include children resources in the response. Only applies to `organization` resources.
 */
export type ParameterincludeChildrenParam = boolean;

/**
 * The invite's unique identifier.
 */
export type ParameterinviteId = string;

/**
 * Filter invites by status.
 */
export type ParameterinviteStatus = Array<InviteStatus>;

/**
 * The public token for the invite. This token is shared with the invitee.
 */
export type ParameterinviteToken = string;

export type GetPermissionsData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type GetPermissionsResponse = (Array<Permission>);

export type GetPermissionsError = (unknown);

export type CreatePermissionData = {
    body?: {
        /**
         * The type of permission.
         */
        type: string;
        /**
         * The name of the permission resource. This is a unique identifier for the permission but can be changed.
         */
        name: string;
        /**
         * A human-readable title of the permission resource. This is used for display purposes.
         */
        title: string;
        /**
         * The description of the permission resource.
         */
        description: string;
        /**
         * Some permissions allow for additional configuration when used with document permissions. Accepts a groq filter or a dataset name.
         */
        config?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type CreatePermissionResponse = (Permission);

export type CreatePermissionError = (unknown);

export type GetPermissionData = {
    path: {
        /**
         * The name of the permission. This is a unique identifier for the permission.
         */
        permissionName: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type GetPermissionResponse = (Permission);

export type GetPermissionError = (unknown);

export type UpdatePermissionData = {
    body?: {
        /**
         * The type of permission.
         */
        type: string;
        /**
         * The name of the permission resource. This is a unique identifier for the permission but can be changed.
         */
        name: string;
        /**
         * A human-readable title of the permission resource. This is used for display purposes.
         */
        title: string;
        /**
         * The description of the permission resource.
         */
        description: string;
        /**
         * Some permissions allow for additional configuration when used with document permissions. Accepts a groq filter or a dataset name.
         */
        config?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * The name of the permission. This is a unique identifier for the permission.
         */
        permissionName: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type UpdatePermissionResponse = (Permission);

export type UpdatePermissionError = (unknown);

export type DeletePermissionData = {
    path: {
        /**
         * The name of the permission. This is a unique identifier for the permission.
         */
        permissionName: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type DeletePermissionResponse = (unknown);

export type DeletePermissionError = (unknown);

export type GetMyPermissionsResponse = (Array<Permission>);

export type GetMyPermissionsError = unknown;

export type GetUsersData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type GetUsersResponse = (Array<User>);

export type GetUsersError = (unknown);

export type GetUserData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The User ID
         */
        sanityUserId: string;
    };
};

export type GetUserResponse = (User);

export type GetUserError = (unknown);

export type RemoveUserData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The User ID
         */
        sanityUserId: string;
    };
};

export type RemoveUserResponse = (unknown);

export type RemoveUserError = (unknown);

export type AddRoleToUserData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The role name
         */
        roleName: string;
        /**
         * The User ID
         */
        sanityUserId: string;
    };
};

export type AddRoleToUserResponse = (User);

export type AddRoleToUserError = (unknown);

export type RemoveRoleFromUserData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The role name
         */
        roleName: string;
        /**
         * The User ID
         */
        sanityUserId: string;
    };
};

export type RemoveRoleFromUserResponse = (unknown);

export type RemoveRoleFromUserError = (unknown);

export type GetuserPermissionsData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The User ID
         */
        sanityUserId: string;
    };
};

export type GetuserPermissionsResponse = (Array<Permission>);

export type GetuserPermissionsError = unknown;

export type AddDefaultRoleToUsersData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type AddDefaultRoleToUsersResponse = (unknown);

export type AddDefaultRoleToUsersError = (unknown);

export type GetRolesData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
    query?: {
        /**
         * Whether to include children resources in the response. Only applies to `organization` resources.
         */
        includeChildren?: boolean;
    };
};

export type GetRolesResponse = (Array<Role>);

export type GetRolesError = unknown;

export type CreateRoleData = {
    body: {
        title: string;
        name: string;
        description?: string;
        appliesToUsers: boolean;
        appliesToRobots: boolean;
        permissions: Array<{
            /**
             * The name of the permission
             */
            name: string;
            /**
             * The parameters for the permission. This is a key-value map of the permission's configuration.
             */
            params?: {
                [key: string]: unknown;
            };
        }>;
    };
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type CreateRoleResponse = (Role);

export type CreateRoleError = (unknown);

export type GetRoleData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The role name
         */
        roleName: string;
    };
};

export type GetRoleResponse = (Role);

export type GetRoleError = (unknown);

export type UpdateRoleData = {
    body: {
        title: string;
        name: string;
        description?: string;
        appliesToUsers: boolean;
        appliesToRobots: boolean;
        permissions: Array<{
            /**
             * The name of the permission
             */
            name: string;
            /**
             * The parameters for the permission. This is a key-value map of the permission's configuration.
             */
            params?: {
                [key: string]: unknown;
            };
        }>;
    };
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The role name
         */
        roleName: string;
    };
};

export type UpdateRoleResponse = (Role);

export type UpdateRoleError = (unknown);

export type DeleteRoleData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The role name
         */
        roleName: string;
    };
};

export type DeleteRoleResponse = (unknown);

export type DeleteRoleError = (unknown);

export type GetRequestsData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
    query?: {
        /**
         * Whether to include children resources in the response. Only applies to `organization` resources.
         */
        includeChildren?: boolean;
    };
};

export type GetRequestsResponse = (Array<Request>);

export type GetRequestsError = (unknown);

export type CreateRequestData = {
    /**
     * Request data to create
     */
    body: {
        note?: string;
        /**
         * Optional URL to redirect the user to after accepting their request has been accepted. Do not include PII or other confidential information.
         *
         */
        requestUrl?: string;
        /**
         * Optional role requested by the user. The approver can assign a different role, this is just a suggestion. If the role does not exist, the request will still be created, no validation on the role will be done.
         *
         */
        requestedRole?: string;
        type?: RequestType;
    };
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type CreateRequestResponse = (Request);

export type CreateRequestError = (unknown);

export type AcceptRequestData = {
    /**
     * Request data to update
     */
    body: {
        roleNames?: Array<(string)>;
    };
    path: {
        /**
         * ID of the request
         */
        requestId: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type AcceptRequestResponse = (Request);

export type AcceptRequestError = (unknown);

export type DeclineRequestData = {
    path: {
        /**
         * ID of the request
         */
        requestId: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type DeclineRequestResponse = (Request);

export type DeclineRequestError = (unknown);

export type GetMyRequestsResponse = (Array<Request>);

export type GetMyRequestsError = (unknown);

export type GetInvitesData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
    query?: {
        /**
         * Whether to include children resources in the response. Only applies to `organization` resources.
         */
        includeChildren?: boolean;
        /**
         * Filter invites by status.
         */
        status?: Array<InviteStatus>;
    };
};

export type GetInvitesResponse = (Array<Invite>);

export type GetInvitesError = (unknown);

export type CreateInviteData = {
    body: {
        email: string;
        role: string;
    };
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type CreateInviteResponse = (Invite);

export type CreateInviteError = (unknown);

export type RevokeInviteData = {
    path: {
        /**
         * The invite's unique identifier.
         */
        inviteId: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type RevokeInviteResponse = (void);

export type RevokeInviteError = (unknown);

export type GetInviteByTokenData = {
    path: {
        /**
         * The public token for the invite. This token is shared with the invitee.
         */
        inviteToken: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type GetInviteByTokenResponse = (Invite);

export type GetInviteByTokenError = (unknown);

export type AcceptInviteData = {
    path: {
        /**
         * The public token for the invite. This token is shared with the invitee.
         */
        inviteToken: string;
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type AcceptInviteResponse = (void);

export type AcceptInviteError = (unknown);

export type ListRobotsData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
    query?: {
        /**
         * Whether to include children resources in the response. Only applies to `organization` resources.
         */
        includeChildren?: boolean;
    };
};

export type ListRobotsResponse = (Array<Robot>);

export type ListRobotsError = (unknown);

export type CreateRobotData = {
    body: {
        /**
         * A human-readable label for the robot.
         */
        label: string;
        memberships: Memberships;
    };
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
    };
};

export type CreateRobotResponse = (RobotWithToken);

export type CreateRobotError = (unknown);

export type GetRobotData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The robot unique identifier.
         */
        robotId: string;
    };
};

export type GetRobotResponse = (Robot);

export type GetRobotError = (unknown);

export type DeleteRobotData = {
    path: {
        /**
         * The resource ID to scope the access request to. Must be a valid ID for the resource type.
         */
        resourceId: string;
        /**
         * The resource to scope access requests to.
         */
        resourceType: ResourceType;
        /**
         * The robot unique identifier.
         */
        robotId: string;
    };
};

export type DeleteRobotResponse = (void);

export type DeleteRobotError = (unknown);